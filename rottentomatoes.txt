class Solution {
     
   class pair{
       int f;
       int s;
       pair(int f,int s){
           this.f=f;
           this.s=s;
       }
   }
    public int orangesRotting(int[][] grid) {
         int n=grid.length;
        int m=grid[0].length;
        
        Queue<pair> q=new LinkedList<>();
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++)
             if(grid[i][j]==2)
               q.add(new pair(i,j));
              
        }
        
        q.add(new pair(-1,-1));
        int count=0;
        while(!q.isEmpty()){
            int i=q.peek().f;
            int j=q.peek().s;
            
            if(i==-1 && j==-1 && q.size()==1)
              {
                q.remove();
                break;
              }
              
            else if(i==-1 && j==-1 && q.size()>1)
              {count++;
                q.remove();
                q.add(new pair(-1,-1));
              }
              
              else{
                  if(i-1>=0 && grid[i-1][j]==1){
                      grid[i-1][j]=2;
                      q.add(new pair(i-1,j));
                  }
                  
                   if(j-1>=0 && grid[i][j-1]==1){
                       grid[i][j-1]=2;
                      q.add(new pair(i,j-1));
                  }
                   if(i+1<n && grid[i+1][j]==1){
                       grid[i+1][j]=2;
                      q.add(new pair(i+1,j));
                  }
                   if(j+1<m && grid[i][j+1]==1){
                        grid[i][j+1]=2;
                      q.add(new pair(i,j+1));
                  }
                  q.remove();
              }
            
        }
        
        
         for(int i=0;i<n;i++){
            for(int j=0;j<m;j++)
             if(grid[i][j]==1)
              return -1;
              
        }
        
        return count;
        
        
    }
}