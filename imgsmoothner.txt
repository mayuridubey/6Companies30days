class Solution {
    public int[][] imageSmoother(int[][] img) {
          // Save the dimensions of the image.
        int m = img.length;
        int n = img[0].length;

        // Create a new image of the same dimension as the input image.
        int[][] smoothImg = new int[m][n];

        // Iterate over the cells of the image.
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                // Initialize the sum and count 
                int sum = img[i][j];
                int count = 1;

                if(i-1>=0) {
                sum+=img[i-1][j];
                count++;
                }
                if(j-1>=0) {
                sum+=img[i][j-1];
                count++;
                }
                if(i+1<m) {
                sum+=img[i+1][j];
                count++;
                }
                if(j+1<n) {
                sum+=img[i][j+1];
                count++;
                }
                if(i-1>=0 && j-1>=0){
                    sum+=img[i-1][j-1];
                    count++;
                }
                if(i-1>=0 && j+1<n){
                    sum+=img[i-1][j+1];
                    count++;
                }
                if(i+1<m && j+1<n){
                    sum+=img[i+1][j+1];
                    count++;
                }
                if(i+1<m && j-1>=0){
                    sum+=img[i+1][j-1];
                    count++;
                }
               

                // Store the rounded down value in smoothImg[i][j].
                smoothImg[i][j] = sum / count;
            }
        }

        // Return the smooth image.
        return smoothImg;
    
        
    }